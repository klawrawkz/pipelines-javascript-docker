# Deploy to Kubernetes - Review app with Azure DevSpaces
# Build and push image to Azure Container Registry; Deploy to Azure Kuberentes Services and setup Review App with Azure DevSpaces
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker 

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '424934a6-00c8-4f30-8262-cca7c368376e'
  imageRepository: 'klawrawkzpipelinesjavascriptdocker'
  containerRegistry: 'cfidsuiteacreastus001.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'cfidsuiteacreastus001bf65-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Azure Service connection
  azureConnection: '0d921130-70e6-423f-ac34-10f264a24d65'

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: 'review-app-$(System.PullRequest.PullRequestId)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: charts
      artifact: charts

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    #condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'klawrawkzpipelinesjavascriptdocker.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: AzureCLI@2
            displayName: echo cluster and RG variables
            inputs:
              scriptType: pscore
              scriptLocation: inlineScript
              azureSubscription: $(azureConnection)
              inlineScript: |
                $resourceGroupName="my-dev-env-app-rg"
                $clusterName="myapp"
                echo $clusterName
                echo $resourceGroupName
                
